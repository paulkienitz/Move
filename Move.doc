
                                    MOVE                (release 1.4)

Move is a replacement for the AmigaDOS pain-in-the-ass Rename command.  It
can rename single files and directories, move them to other directories, and
move groups of files specified with a pattern.  It is "pure" and can be made
resident.  It is unrelated to the Arp Move command.  It does not have the
ability to move files from one volume to another.  And now, in release 1.4,
it has regained the ability to work in first-generation versions of AmigaDOS,
as are found in the majority of machines that were sold.

It exists in two versions, one called Move and the other called Name.  They
differ only in one feature.  Each has an option to mimic the behavior of the
other.  Move works like a regular renaming command, whereas Name is handy for
changing the name of a file without putting it in a different directory.
That is, "Name vol:dir/subdir/Foo Bar" changes the file's name from Foo to
Bar without moving it to a different directory.  With an ordinary Move or
Rename command you would have to type the vol:dir/subdir/ path twice.

The basic ways to use Move are as follows.  First:

               MOVE [FROM] oldname [TO] newname
    example:   move :t/ed-backup to :foo/readme

where oldname is the pathname of an existing file or directory, newname is
a pathname specifying a new name in an existing directory, and the keywords
FROM and TO are optional.  This is like the existing Rename command.  AS can
be used instead of TO -- this sounds better when using the Name version than
TO does.  Second:

               MOVE [FROM] oldname [TO] directory
    example:   move sys:downloads/Dr  C:

where the TO arg is an existing directory.  The FROM arg is relocated into
the directory named, keeping its old name.  In the example above,
sys:downloads/Dr would become C:Dr.  The TO arg is optional; if there is no
second name in the command, the FROM file or directory is moved into your
current directory.  Third:

               MOVE [FROM] pattern [TO] directory
    example:   move t:#?.library libs:

The pattern is a directory path followed by an AmigaDOS pattern.  You may
not use a pattern for the directory names in the middle of the path, for
instance sys:work/#?/#?.c -- patterns are only recognized in the final part
of the pathname after the last slash or colon.  (This may change in a future
version.)  A pattern with no pathname refers to files in the current
directory, of course.  All files and subdirectories in that directory which
match the pattern are moved to the TO directory.  Under AmigaDOS 2.04 or
higher, the new pattern syntax with square brackets and everything is used,
and "*" is equivalent to "#?" if you set the Dos WILDSTAR flag with one of
the many little programs available for the purpose, such as my own NathanHale
program, which is included (but actually belongs to my Dr 2.0 release, so
that's where you can find the source).

The version called Name works a little differently.  To be specific, in
the TO argument it treats relative pathnames (that is, pathnames with no ":"
in them) as being relative to the directory that the source file(s) are in,
rather than relative to the current directory that the command was run from.
This feature can often save typing directory names twice.  For instance, the
command:

    Name ram:env/Foo sys/Bar

would be equivalent to:

    Rename ram:env/Foo ram:env/sys/Bar

This can save a lot of typing if the source path is lengthy, for instance:

    Name sys:Prefs/Env-Archive/Sys/overscan.prefs overscan.prefs-bak

Using Name with a directory as the To argument can feel counterintuitive,
because you expect it to rename rather than moving stuff into a directory,
but this is also pretty useful.  For instance, you can move a file into a
child directory of its current location with a command like:

    Name sys:work/topic/project/documents/outdated-file old

to move outdated-file into the sys:work/topic/project/documents/old folder.

Arguments are given according to a BCPL-style command template.  For Move,
the template is:

From/A,To=As,Q=Quiet/S,F=FilesOnly/S,I=Icon/S,N=Name/S,MoveOnly/S,NameOnly/S

For the Name version, the Name switch is replaced with a Move switch:

From/A,To=As,Q=Quiet/S,F=FilesOnly/S,I=Icon/S,M=Move/S,MoveOnly/S,NameOnly/S

The Name or N switch makes Move act like Name, and the Move or M switch makes
Name act like Move.  The idea is that you only need one -- whichever one you
find useful more often, and when necessary use it to do the other's job too.
One convenient thing you can do is use an alias to make one appear as the
other, for instance "alias Name Move [] Name".  Personally, I use both often
enough so that I just make aliases called "m" and "n".

Only the From arg is required.  It can be a file or directory name to be
moved, or it can be a directory path with a pattern on the end.  The To or As
arg is the new name that the source should have (if From is not a pattern),
or the name of an existing directory to move the source into.  There are
five other option switches.  They change its behavior as follows:

F or FilesOnly applies only when the From arg is a pattern.  It causes only
files to be moved, and all subdirectories to be left in place, even if they
match the pattern.

Q or Quiet also applies only when a pattern is used.  Normally Move writes
the name of every file that matches the pattern and is successfully moved.
(But when you don't use a pattern, a successful move or name is silent.)
Quiet prevents this output.  It does not affect the output of error messages,
except for a couple that do not actually indicate failure: "Nothing matched
pattern" and "Source and destination are the same directory; nothing done."

When I or Icon is used, whenever Move moves a file or directory it will also
move that file's icon if it exists.  That is, whenever a file or subdirectory
named Foo is moved, Foo.info will also be moved to the same place if it
exists.  This works with patterns as well as individual files and dirs.  (I
should probably make Icons work as a synonym of Icon, as I sometimes forget
myself which is correct.)

The MoveOnly flag changes how the To or As argument is interpreted.  Normally
this can be ambiguous: if it's a directory it becomes the destination of a
move, but if it's a nonexistent name it's used for renaming the source.  (If
it exists and is a file, the operation fails.)  Sometimes this ambiguity is
undesirable, such as in a batch operation.  So this switch tells Move that it
should only move things and never rename; if To is not an existing directory,
it will fail with a message such as "Can't move to MyDesiredDestinationDir:
directory not found".

The NameOnly flag is like MoveOnly, but with the opposite effect: it ensures
that it should only rename things and not move them.  If To is the path of an
existing directory or file, it fails.  To succeed, To must be a new name;
otherwise it will fail with a message such as "Can't rename as MyHopedForName:
object already exists".

(If both MoveOnly and NameOnly are specified, all operations will fail, but
but the message may tell you what it would have done.  No guarantees.)

A note on capitalization of names:  With the Copy and AmigaDOS 2.0 Rename
commands, when you move or copy a file to a new directory, the name it gets
in the new directory is capitalized as you wrote it in the copy command, not
as it was in the old directory.  Move preserves the capitalization that it
had before, except in the case when you are leaving it in the same directory
it was in before.  This means if you want to change a file's capitalization,
you can simply use the NAME option and leave out the TO arg.  For instance,
you can rename foo/README.TXT as foo/ReadMe.txt with the command

    Name foo/ReadMe.txt

If the file being recapitalized is in the current directory then Move will do
this even without the NAME option.  The disadvantage of this is that you
can't move it to a different directory and also change its capitalization in
the same operation, unless you spell out the name in both the source and the
destination, e.g. "Move foo/readme.txt bar/ReadMe.txt".

(It's also possible to change capitalization by naming the same file in both
args.  This is the one case where giving the path of an existing file as the
To argument is not an error.)

If errors are encountered while moving a group of files according to a
pattern, it will keep trying with the rest of the files if the error is not
"severe".  Move will return 0 ("OK") if any files are moved successfully and
no severe errors come up.  It will return 5 ("WARN") with a message, doing
nothing, if no files match the pattern, or if nonfatal errors occurred on
every matching file.  Fatal errors, such as the TO directory not being found,
will make it return 10 ("ERROR").  It will return 0, with a warning mesage,
if the destination directory is the one that the files are already in.  The
QUIET option silences these messages.  "Fatal" errors are any errors except:
trying to rename a subdirectory inside itself, failing to find a file that
has disappeared between the time it was looked up and the time it is being
acted on (it might have been deleted or renamed by another program), or most
commonly, colliding with a file that already has the same name in the TO
directory.

Starting in version 1.2, Move can also relabel a volume.  The FROM argument
must be the root level of a volume or device, and the TO argument must be
a simple name with no slashes, with or without a colon after it.  The NAME
option must be used, or you'll get an error message saying "Cannot move
device, volume, or assign."  For example, to relabel Master:, you can go

    Name Master: CopyOfMaster:
or
    Move Name Master: CopyOfMaster

You can change the capitalization of a volume label with just one argument.
This was added in the 1.4 release.

Hard and soft links can be moved or renamed in the same way as files or
directories.  This did not work until Move 1.4; previous versions would just
move or rename the object targeted by the link, instead of the link itself,
if it succeeded at all.  Links can't be created under AmigaDOS 1.2 or 1.3,
but Move can handle them if found on a disk created by a newer OS version.

There's a caveat on some of the above if the From argument is a path that
ends in a slash, such as one indicating a parent directory.  Normally it
should make no difference if a directory name has a single slash after it,
such as "foo/bar/" instead of "foo/bar", but it can throw AmigaDOS off a
little, and even the stock Rename command is affected in some cases.  Move
cannot do single-argument recapitalization with such a path, nor can it
always detect when a renaming action makes no actual change.


Things I could add in future versions, but probably won't: the ability to
use patterns throughout a pathname instead of just at the end, and maybe to
simulate moving across volumes like Arp Move.  I'm inclined against the
latter -- to me that seems like a dangerous feature, particularly since
there's a bug in older filesystems that makes programs think a write was
successful when in fact "Volume Foo has a read/write error" requesters have
been coming up.

Move and Name (and NathanHale) are placed in the public domain by Paul
Kienitz, with no license.  Email paul@paulkienitz.net to contact me.



Known issues:

  - On international filesystems, it may fail to match upper-ascii letters
    with umlauts or accent marks in a case-insensitive way.  This will be
    worked on in the next release.  This isn't just a problem with Move but
    with the AmigaDOS 1.x compatibility layer I've used in it.

  - An apparent bug which can occur, particularly when using it Name-style,
    is that sometimes if the To arg is an illegal path, like for instance
    "ram:///blip", it may do nothing yet report success.  This is an inherent
    problem with some filesystems, which expect you not to send them absurd
    paths, and there isn't much that Move can do about it.


Differences between release 1.4 and release 1.3:

  - Expanded my unreleased "temparse" library to substitute for a variety of
    AmigaDOS 2.x API functions to help programs run under AmigaDOS 1.2, and
    retrofitted Move to use it so it supports AmigaDOS 1.x again like its
    early versions originally did.  Other projects are going to use temparse
    after I convert it into a dynamic .library under a new name, but since
    that is not ready yet, the Move binary has doubled in size.  The makefile
    also supports compiling a 2.x-only version which is still small.

  - Improved support for renaming hard and soft links (previously it would
    tend to rename the target instead of the link itself, and might fail).
    This involved significant refactoring, and an amazingly complex set of
    test cases for such a small and simple application.

  - Changing capitalization with one argument did not previously work for
    relabeling volumes.  Also, some cases with ordinary files or directories
    would fail to make any change.

  - Improved some error messages, and added a couple of new ones to clarify
    odd cases.

  - Fixed a bug when moving a pattern which caused a nonfatal failure on one
    file to halt early without attempting the rest.

  - Internal version information added, readable by the Version command.

Differences between release 1.3 (which was the first true public release) and
version 1.2:

  - MoveOnly and NameOnly switches added.

  - It now explicitly avoids trying to move or rename assigned names;
    commands like "Move FONTS: MoreFonts" will produce error messages.

  - It's finally been subject to thorough testing, with several issues fixed.

Differences between version 1.2 and version 1.1:

  - Fixed bugs with pattern parsing.

  - Fixed nonworking draft of support for relabeling volumes.

  - Fixed bug in moving to root with "Name file :newname".

  - Support added for filenames longer than 30 characters.

  - Now using malloc instead of manually managing all memory freeing.

Approximate differences between version 1.1 and version 1.0 (there really
wasn't any clear point of division):

  - The separate Name program with MOVE option did not exist in 1.0.

  - AS is now synonymous with TO in the template.

  - Using a directory as the destination did not work with the NAME option
    before.

  - 1.0 had an enforcer hit -- fixed.

  - Move 1.0 could run under AmigaDOS 1.x, at least in its earlier forms,
    but 1.1 requires 2.04 or newer.  (1.4 restored 1.x support.)
